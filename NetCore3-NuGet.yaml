name: 1.2$(rev:.r) # build numbering format

variables:
  BuildConfiguration: "Release"
  SolutionName: "MLH.DockerExtensions.sln"
  ReSharperSettingsFileName: "CISettings_NuGet.DotSettings"
  ApplicationSubPath: "MLH.DockerExtensions"
  ProjectPath: "$(ApplicationSubPath)/**/*.csproj"

resources:
  repositories:
    - repository: ALMStuff
      type: github
      name: DrMueller/ALMStuff
      ref: refs/heads/master
      endpoint: GitHub-DrMueller

jobs:
  - job: "RunResharper"
    displayName: "Run ReSharper analysis"
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
    steps:
      - checkout: self
      - checkout: ALMStuff
      - task: DotNetCoreCLI@2
        displayName: "Restore"
        inputs:
          command: restore
          vstsFeed: '3c2d9c9a-d8f7-42f4-b7a3-dddf4064110a'
          projects: $(ProjectPath)

      - task: Cache@2
        displayName: Cache ReSharperCLT
        inputs:
          key: ResharperCLT
          path: $(Build.SourcesDirectory)/Lib/Resharper
          cacheHitVar: ReSharperCLTCacheRestored
      - task: NuGetCommand@2
        displayName: "Restore ReSharper CLT NuGet"
        inputs:
          command: custom
          arguments: "install JetBrains.ReSharper.CommandLineTools -source https://api.nuget.org/v3/index.json -Version 2021.2.0 -OutputDirectory $(Build.SourcesDirectory)/Lib/Resharper"
        condition: ne(variables.ReSharperCLTCacheRestored, 'true')

      - powershell: |
          $sourceReSharperFilePath = "$(Build.SourcesDirectory)/ALMStuff/ServerDevelopment/Frameworks/ReSharper/CI/$(ReSharperSettingsFileName)"
          $origFile = "$(Build.SourcesDirectory)/$(ApplicationSubPath)/$(SolutionName).DotSettings"
          Copy-Item -Path "$sourceReSharperFilePath" -Destination "$origFile" -Force -Verbose


        displayName: 'Copy relative ReSharper settings'

      - task: alanwales.resharper-code-analysis.custom-build-task.ResharperCli@2
        displayName: "Run ReSharper analysis"
        inputs:
          solutionOrProjectPath: $(ApplicationSubPath)/$(SolutionName)
          additionalArguments: "--no-build"

  - job: "BuildAndPublishToNuGet"
    dependsOn: RunResharper
    condition: succeeded()
    displayName: "Build and publish to NuGet"
    variables:
      FolderToPack: "Application"
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
      - checkout: ALMStuff
      - task: DotNetCoreCLI@2
        displayName: "Restore"
        inputs:
          command: restore
          vstsFeed: '3c2d9c9a-d8f7-42f4-b7a3-dddf4064110a'
          projects: $(ProjectPath)

      - task: DrMueller2.NuGetVulnerabilityScan.NugetVulnerabilityScanTask.NugetVulnerabilityScanTask@1
        displayName: NuGet Vulnerability Scan
        inputs:
          projectPath: $(ProjectPath)

      - task: DotNetCoreCLI@2
        displayName: "Build with warnings as errors"
        inputs:
          projects: $(ProjectPath)
          arguments: '/p:TreatWarningsAsErrors="true" --configuration $(BuildConfiguration)'

      - task: Docker@2
        displayName: "Start SQL Server Container"
        inputs:
          containerRegistry: DockerHub
          command: run
          arguments: '-e "ACCEPT_EULA=Y" -e "SA_PASSWORD=sTronkpassword54322!" -p 1437:1433 --name SQLServer2017 -d mcr.microsoft.com/mssql/server:2017-latest'

      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs:
          command: test
          projects: "$(ApplicationSubPath)/**/*Tests.csproj"
          arguments: "--configuration --configuration $(BuildConfiguration)"

      - template: AzureDevOps/BuildTemplates/NetCore/Steps/Pack_And_Publish_To_NuGet.yaml@ALMStuff
        parameters:
          FolderToPack: $(FolderToPack)
